<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lucas-y.github.io/</id>
    <title>前端小白</title>
    <updated>2020-12-26T02:10:36.400Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lucas-y.github.io/"/>
    <link rel="self" href="https://lucas-y.github.io/atom.xml"/>
    <subtitle>知行合一</subtitle>
    <logo>https://lucas-y.github.io/images/avatar.png</logo>
    <icon>https://lucas-y.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 前端小白</rights>
    <entry>
        <title type="html"><![CDATA[vue]]></title>
        <id>https://lucas-y.github.io/post/vue/</id>
        <link href="https://lucas-y.github.io/post/vue/">
        </link>
        <updated>2020-12-25T02:14:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vue-的基本概念">vue 的基本概念</h2>
<p><a href="https://cn.vuejs.org/">vue官网</a><br>
<code>vue是一个渐进式的 javascript 框架</code></p>
<ul>
<li>渐进式  =&gt;  逐渐增强, 学一点用一点, 利于上手</li>
<li>框架:  一套完整的解决方案</li>
</ul>
<blockquote>
<p><strong>特点</strong>: 需要按照框架的规则编写代码   <strong>好处</strong>: 大大的提升了开发效率</p>
</blockquote>
<h2 id="vue3-和-vue2的区别">vue3 和 vue2的区别</h2>
<h3 id="版本说明">版本说明</h3>
<p>当前，vue 共有 3 个大版本，其中：</p>
<ul>
<li><strong><code>2.x 版本</code>的 vue 是目前企业级项目开发中的主流版本</strong></li>
<li><code>3.x 版本</code>的 vue 于 2020-09-19 正式发布，生态还不完善，尚未在企业级项目开发中普及和推广</li>
<li><code>1.x 版本</code>的 vue 几乎被淘汰，不再建议学习与使用<br>
总结:</li>
</ul>
<ol>
<li>目前进公司,  公司一定选稳定的开发模式!  主流版本一定是 vue2 (<strong>必须重点掌握</strong>)</li>
<li>vue3 虽然生态尚不完善, 没有那么普及, 但是我们可以 <strong>前瞻变化</strong> , 这是将来的趋势</li>
</ol>
<h3 id="vue3-和-vue2-的对比">vue3 和 vue2 的对比</h3>
<p>vue2.x 中绝大多数的 API 与特性，在 vue3.x 中同样支持。 (<strong>向前兼容</strong>)<br>
同时，vue3.x 中还新增了 3.x 所特有的功能, 废弃了一些旧功能</p>
<ol>
<li>新增例如：<strong><code>组合式 API (函数式编程)</code></strong>、多根节点组件、更好的 TypeScript 支持等  (ts 在原生基础上, 增加了类型检测)</li>
<li>废弃例如：<strong><code>过滤器</code></strong> 等<br>
如果是2.x的版本, 可以放心的使用过滤器<br>
如果项目已经升级到了3.x 版本的 vue，官方建议使用计算属性或方法代替被剔除的过滤器功能<br>
官方迁移指南: https://v3.vuejs.org/guide/migration/introduction.html</li>
</ol>
<h2 id="mvvm设计模式">MVVM设计模式</h2>
<p>MVVM是一种设计模式, 从后端的 MVC模式 演化而来</p>
<ul>
<li>M Model 数据模型 可以是自己准备回来的数据 也可以是请求回来的数据</li>
<li>V View 视图相关的</li>
<li>VM ViewModel 视图模型 既可以操作数据 又可以操作视图<br>
<img src="https://lucas-y.github.io//post-images/1608864082496.png" alt="" loading="lazy"></li>
</ul>
<h2 id="vue初体验">vue初体验</h2>
<ol>
<li>安装下载 vue</li>
</ol>
<pre><code class="language-txt">npm i vue
</code></pre>
<ol start="2">
<li>引入一个 vue</li>
<li>使用 vue - 初始化 vue 实例  <strong>指定视图 和 数据</strong></li>
</ol>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
  &lt;h1&gt;{{ msg }}&lt;/h1&gt;
  &lt;h1&gt;{{ msg }}&lt;/h1&gt;
&lt;/div&gt;

&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  // 只要引入 vue.js, 那么全局就有了一个Vue 构造函数
  // 创建vue实例
  const vm = new Vue({
    // 指定视图 + 数据
    // 1. el element, 用于指定vue所管理的视图范围, 值是一个选择器
    el: '#app',
    // 2. data, 用于指定vue中可以使用的数据
    data: {
      msg: '你好, vue'
    }
  })
&lt;/script&gt;
</code></pre>
<h2 id="vue使用的注意点">vue使用的注意点</h2>
<ol>
<li>new Vue() 构造函数Vue, 首字母大写</li>
<li>el 不能指定为 html 和 body, 但是可以是一个大的div</li>
<li>到了vue, 不要老想着操作dom了, <code>要更新视图, 操作数据即可</code></li>
</ol>
<h2 id="vue的插值表达式">vue的插值表达式</h2>
<p>插值表达式, 小胡子语法<code>{{ }}</code></p>
<ol>
<li>作用:  使用 data 中的数据渲染视图</li>
<li>基本语法, 支持三元运算符<pre><code class="language-jsx">{{ msg }}
{{ obj.name }}
{{ msg.toUpperCase() }}
{{ obj.age &gt; 18 ? '成年' : '未成年' }}
</code></pre>
</li>
<li>vue中插值表达式的注意点<br>
(1)  使用的数据在 data 中要存在<pre><code class="language-jsx">&lt;h1&gt;{{ gaga }}&lt;/h1&gt;
</code></pre>
(2)  能使用表达式, 但是不能使用 if  for<pre><code class="language-jsx">&lt;h1&gt;{{ if (obj.age &gt; 18 ) { }   }}&lt;/h1&gt;
</code></pre>
(3)  不能在标签属性中使用<pre><code class="language-jsx">&lt;h1 id=&quot;box&quot; class=&quot;box&quot; title=&quot;{{ msg }}&quot;&gt;&lt;/h1&gt;
</code></pre>
</li>
</ol>
<h2 id="vue指令">vue指令</h2>
<p><strong>vue指令, 实质上就是特殊的 html 标签属性, 特点:  v- 开头</strong><br>
每个 v- 开头的指令, 都有着自己独立的功能, 将来vue解析时, 会根据不同的指令提供不同的功能</p>
<h3 id="v-text-和-v-html">v-text 和 v-html</h3>
<ul>
<li>v-text 设置元素的 innerText, 不识别标签, 基本可以被 插值表达式 替代, 不太常用</li>
<li>v-html 设置元素的 innerHTML, 可以识别标签,  需要识别标签的时候, 使用v-html即可</li>
</ul>
<h3 id="v-if-和-v-show">v-if 和 v-show</h3>
<p>v-show 和 v-if 功能: 控制盒子的显示隐藏</p>
<ol>
<li>v-show<br>
语法:  v-show=&quot;布尔值&quot;    (true显示, false隐藏)<br>
原理:  实质是在控制元素的 css 样式,  <code>display: none;</code></li>
<li>v-if<br>
语法: v-if=&quot;布尔值&quot;   (true显示, false隐藏)<br>
原理:  实质是在动态的创建 或者 删除元素节点<br>
应用场景:</li>
</ol>
<ul>
<li>如果是频繁的切换显示隐藏, 用 v-show<br>
v-if, 频繁切换会大量的创建和删除元素, 消耗性能</li>
<li>如果是不用频繁切换, 要么显示, 要么隐藏的情况, 适合于用 v-if<br>
v-if 是<code>惰性</code>的, 如果初始值为 false, 那么这些元素就直接不创建了, 节省一些初始渲染开销</li>
</ul>
<h3 id="v-if-v-else-if-v-else">v-if v-else-if v-else</h3>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
  &lt;h1 v-if=&quot;isLogin&quot;&gt;尊敬的超级vip, 你好&lt;/h1&gt;
  &lt;h1 v-else&gt;你谁呀, 赶紧登陆~&lt;/h1&gt;
  &lt;hr&gt;
  &lt;h1 v-if=&quot;age &gt;= 60&quot;&gt;60岁以上, 广场舞&lt;/h1&gt;
  &lt;h1 v-else-if=&quot;age &gt;= 30&quot;&gt;30岁以上, 搓麻将&lt;/h1&gt;
  &lt;h1 v-else-if=&quot;age &gt;= 20&quot;&gt;20岁以上, 蹦迪&lt;/h1&gt;
  &lt;h1 v-else&gt;20岁以下, 唱跳rap篮球&lt;/h1&gt;
&lt;/div&gt;

&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  const vm = new Vue({
    el: '#app',
    data: {
      msg: 'hello vue',
      isLogin: true,
      age: 18
    }
  })
&lt;/script&gt;
</code></pre>
<h3 id="v-on指令">v-on指令</h3>
<ol>
<li>用于注册事件</li>
</ol>
<ul>
<li>写内联语句, 将要执行的代码直接写在 &quot;&quot; 内部, 适合写少量代码<br>
v-on:事件名=&quot;要执行的代码&quot;</li>
<li>指向methods中的定义的函数<br>
v-on:事件名=&quot;methods中的函数&quot;</li>
<li>指向methods中的定义的函数，并传入参数<br>
v-on:事件名=&quot;methods中的函数(实参)&quot;<br>
<code>简写: @事件名</code></li>
</ul>
<ol start="2">
<li>vue中获取事件对象</li>
</ol>
<blockquote>
<p>需求: 默认a标签点击会跳走,  希望阻止默认的跳转, 阻止默认行为  e.preventDefault()</p>
</blockquote>
<ul>
<li>没有传参, 通过形参接收 e</li>
<li>传参了, 通过$event指代事件对象 e</li>
</ul>
<ol start="3">
<li>事件修饰符</li>
</ol>
<ul>
<li><code>.prevent</code> 阻止默认行为</li>
<li><code>.stop</code> 阻止冒泡</li>
</ul>
<ol start="4">
<li>案件修饰符</li>
</ol>
<blockquote>
<p>在监听键盘事件时，我们经常需要判断详细的按键。此时，可以为键盘相关的事件添加按键修饰符</p>
</blockquote>
<ul>
<li><code>@keyup.enter</code>  回车触发</li>
<li><code>@keyup.esc</code>  返回触发</li>
</ul>
<h3 id="v-bind指令">v-bind指令</h3>
<p><strong>作用: 访问data中的数据,  动态的设置html的标签属性</strong><br>
语法: <code>v-bind:属性名=&quot;值&quot;</code> ,  简写 <code>:属性名=&quot;值&quot;</code></p>
<blockquote>
<p>v-bind 对于类名操作的增强, 注意点, :class 不会影响到原来的 class 属性 :class=&quot;对象/数组&quot;</p>
</blockquote>
<pre><code class="language-js">(1) :class=&quot;对象&quot; 
	{ 类名: 布尔值, 类名: 布尔值 } 
	如果是true, 加上这个类, 如果是false, 移除这个类

(2) :class=&quot;数组&quot;
	['类名1', '类名2', '类名3']
	只要有这个类, 就加上

(3) :class=&quot;对象/数组&quot; 直接内联在结构中编写 (重点)
</code></pre>
<h3 id="v-for">v-for</h3>
<p>遍历对象和数组</p>
<ol>
<li>遍历数组 (常用)</li>
</ol>
<pre><code class="language-txt">v-for=&quot;item in 数组名&quot;  item每一项
v-for=&quot;(item, index) in 数组名&quot;  item每一项 index下标
</code></pre>
<ol start="2">
<li>遍历对象 (一般不用)</li>
</ol>
<pre><code class="language-txt">v-for=&quot;(value, prop) in 对象&quot;  value属性值, prop属性名
</code></pre>
<ol start="3">
<li>v-for 的key的说明</li>
</ol>
<ul>
<li>vue 的更新机制的说明<br>
数据变化了, vue会对比<code>新旧 虚拟 dom</code>的差异,  对比出差异, 进行差异化更新 (高效)</li>
<li>为啥不对比真实dom, 而对比虚拟dom?  =&gt;  提升对比效率</li>
<li>key 只是给 虚拟dom 添加了一个唯一的标识, 改变了同级兄弟元素的对比复用策略, 进而优化列表的渲染更新性能<br>
<code>总结</code>: 一般为了优化渲染的性能, 可以在遍历列表时, 加上一个 key属性, key一般指定成 id</li>
</ul>
<h3 id="v-model">v-model</h3>
<p>**作用: 给表单元素使用, 双向数据绑定 **<br>
<strong>语法: v-model='值'</strong></p>
<ol>
<li>
<p>数据变化了, 视图会跟着变<br>
数据劫持(监听数据的变化)<br>
vue2: Object.defineProperty<br>
vue3: proxy</p>
</li>
<li>
<p>视图变化了, 数据要跟着变<br>
输入框内容变化了(监听用户的输入, 监听input事件), 数据要跟着变</p>
</li>
<li>
<p>v-model 处理其他表单元素<br>
<strong>v-model 会忽略掉表单元素原本的value, checked等初始值</strong><br>
<code>textarea, select, checkbox</code></p>
</li>
</ol>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
  &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;
  &lt;hr&gt;
  &lt;textarea v-model=&quot;desc&quot;&gt;&lt;/textarea&gt;
  &lt;p&gt;{{ desc }}&lt;/p&gt;
  &lt;hr&gt;
  &lt;!-- select框的value值, 就是选中的option的value值 
       1. 可以用于获取
       2. 还可以用于设置
  --&gt;
  &lt;select v-model=&quot;cityId&quot;&gt;
    &lt;option value=&quot;1&quot;&gt;上海&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;无锡&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;香港&lt;/option&gt;
    &lt;option value=&quot;4&quot;&gt;北京&lt;/option&gt;
    &lt;option value=&quot;5&quot;&gt;哈尔滨&lt;/option&gt;
    &lt;option value=&quot;6&quot;&gt;齐齐哈尔&lt;/option&gt;
  &lt;/select&gt;
  &lt;p&gt;{{ cityId }}&lt;/p&gt;
  &lt;hr&gt;
  &lt;input type=&quot;checkbox&quot; v-model=&quot;flag&quot;&gt;
  &lt;p&gt;{{ flag }}&lt;/p&gt;
&lt;/div&gt;

&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  // 注意点: v-model设置了之后, 会忽略掉默认设置的value, checked等属性
  // 表单元素小练习
  // 1. textarea  value
  // 2. select/option  value
  // 3. checkbox复选框  checked属性

  const vm = new Vue({
    el: '#app',
    data: {
      msg: '123456',
      desc: '今天天气还行',
      cityId: 6,
      flag: false
    }
  })
&lt;/script&gt;
</code></pre>
<ol start="4">
<li>v-model 修饰符</li>
</ol>
<ul>
<li>
<p>number<br>
如果想自动将用户的输入值, 用parseFloat转成数字类型, ，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<pre><code class="language-html">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;
</code></pre>
<p>如果这个值如果这个值无法转数字，则会返回原始的值。</p>
</li>
<li>
<p>trim<br>
如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<pre><code class="language-html">&lt;input v-model.trim=&quot;msg&quot;&gt;
</code></pre>
</li>
<li>
<p>lazy<br>
在<code>change</code>时而非<code>input</code>时更新，可以给 <code>v-model</code> 添加 <code>lazy</code> 修饰符：<br>
对于 input:text 文本框, 监听用户的修改</p>
<blockquote>
<p>change   失去焦点 或 用户回车, 确认改完了触发 (了解);  input    只要用户输入了, 实时触发</p>
</blockquote>
<pre><code class="language-html">&lt;input v-model.lazy=&quot;msg&quot;&gt;
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[四象限工作法]]></title>
        <id>https://lucas-y.github.io/post/demo/</id>
        <link href="https://lucas-y.github.io/post/demo/">
        </link>
        <updated>2020-12-08T10:09:34.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/30b2ab0dc20e">链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重要知识点]]></title>
        <id>https://lucas-y.github.io/post/keypoints/</id>
        <link href="https://lucas-y.github.io/post/keypoints/">
        </link>
        <updated>2020-12-08T09:33:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="重要知识点">重要知识点</h1>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6681030"><label class="task-list-item-label" for="task-item-6681030"> 面试题</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8528743"><label class="task-list-item-label" for="task-item-8528743"> 浏览器优化</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9101350"><label class="task-list-item-label" for="task-item-9101350"> 工作中遇到的难点</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6779596"><label class="task-list-item-label" for="task-item-6779596"> seo（花钱，html后缀，外链，标签语义化）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6586984"><label class="task-list-item-label" for="task-item-6586984"> 前端开发优化问题</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3229099"><label class="task-list-item-label" for="task-item-3229099"> 浏览器兼容</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-10287"><label class="task-list-item-label" for="task-item-10287"> css</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4078729"><label class="task-list-item-label" for="task-item-4078729"> 双微元素清除</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1849917"><label class="task-list-item-label" for="task-item-1849917"> 浮动</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8713530"><label class="task-list-item-label" for="task-item-8713530"> HTML5（语义化，seo，移动端，游戏）</label></li>
</ul>
<h2 id="vue">vue</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2822782"><label class="task-list-item-label" for="task-item-2822782"> 父子组件生命周期触发时机</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4586547"><label class="task-list-item-label" for="task-item-4586547"> createdF ===> createdS</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9759359"><label class="task-list-item-label" for="task-item-9759359"> mountedS ===> mountedF</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2684290"><label class="task-list-item-label" for="task-item-2684290"> updatedS ===> updatedF</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1989579"><label class="task-list-item-label" for="task-item-1989579"> destroyedS ===> destroyedF</label></li>
</ul>
</li>
</ul>
<h2 id="react">react</h2>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2334412"><label class="task-list-item-label" for="task-item-2334412"> setState</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9948457"><label class="task-list-item-label" for="task-item-9948457"> 组件的更新机制依靠事务进行批量更新</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4171048"><label class="task-list-item-label" for="task-item-4171048"> 将state的更新延缓到最后批量合并再去渲染对于应用的性能优化是有极大好处的，如果每次的状态改变都去重新渲染真实dom，那么它将带来巨大的性能消耗。</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9235299"><label class="task-list-item-label" for="task-item-9235299"> 保证内部的一致性：即使state是同步更新，props也不是。（你只有在父组件重新渲染时才能知道props）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9292299"><label class="task-list-item-label" for="task-item-9292299"> setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。生命周期函数和合成函数中调用setState表现异步更新，是因为组件初始化和调用合成函数时都会触发ReactDefaultBatchingStrategy事务的batchUpdates方法，将批量更新标记设置为true，所以后面的setState都会存储到dirtyComponents中，执行批量更新之后再将标志设置为false</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7252484"><label class="task-list-item-label" for="task-item-7252484"> setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-689527"><label class="task-list-item-label" for="task-item-689527"> 生命周期</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8133386"><label class="task-list-item-label" for="task-item-8133386"> constructor->componentWillMount->render->componentDidMount</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2735731"><label class="task-list-item-label" for="task-item-2735731"> componentWillReceiveProps->shouldComponentUpdate->componentWillUpdate->render->componentDidUpdate</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6727402"><label class="task-list-item-label" for="task-item-6727402"> componentWillUnmount</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2971702"><label class="task-list-item-label" for="task-item-2971702"> componentDidCatch getDerivedStateFromError</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9356223"><label class="task-list-item-label" for="task-item-9356223"> react项目打包优化</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1981590"><label class="task-list-item-label" for="task-item-1981590"> antd-mobile组件库按需加载（react-app-rewired，customize-cra，babel-plugin-import，config-overrides.js）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3685595"><label class="task-list-item-label" for="task-item-3685595">  基于路由的代码分割实现组件的按需加载，提高首屏加载速度（React.lazy，import，Suspense，fallback）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8644499"><label class="task-list-item-label" for="task-item-8644499">  creat-react-app脚手架内部有大量优化</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9545056"><label class="task-list-item-label" for="task-item-9545056"> 组件性能优化</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9121956"><label class="task-list-item-label" for="task-item-9121956"> 减轻state（无关数据或者ref，定时器绑this）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3370166"><label class="task-list-item-label" for="task-item-3370166"> shouldComponentUpdate</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1815181"><label class="task-list-item-label" for="task-item-1815181"> 纯组件</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2845808"> 列表map <strong>key</strong><label class="task-list-item-label" for="task-item-2845808"> 列表map **key**</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9631032"><label class="task-list-item-label" for="task-item-9631032"> 不可变性 创建新对象 而不是在原有引用上修改</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6194048"> <a href="https://juejin.cn/post/6844903813070094350">react副作用<label class="task-list-item-label" for="task-item-6194048"> [react副作用](https://juejin.cn/post/6844903813070094350)</label></p>
</li>
</ul>
<h2 id="css">css</h2>
<pre><code>继承&lt;通配符选择器&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;！important

解决marign的塌陷现象：
        1、父元素设置border-top
        2、父元素设置padding-top
        3、父元素设置overflow：hidden
        4、设置浮动
        5、display：inline-block
 
 清除浮动的几种方法：
      1、额外标签法 (在内容的最后，块级元素)
          1、在父元素内容的最后添加一个块级元素
          2、需要给块级元素设置一个清除浮动的核心代码  clear：both；
        缺点：就是在页面中添加了一些多余的标签

      2、单伪元素清除法
          本质上来说就是额外标签法，使用的是伪元素完成效果的！！
          ::after

      3、直接给父元素设置overflow：hidden

      4、简单粗暴：直接设置高度
 
 .clearfix::before,
    .clearfix::after {
      content: '';
      display: table;
    }
    .clearfix::after {
      clear: both;
    }
    /*兼容ie浏览器*/
    .clearfix {
      *zoom:1;
    }
</code></pre>
<h2 id="js">js</h2>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3912811"> <a href="https://juejin.im/post/5b8f76675188255c7c653811">eventloop<label class="task-list-item-label" for="task-item-3912811"> [eventloop](https://juejin.im/post/5b8f76675188255c7c653811)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4132936"> <a href="https://juejin.im/post/5c41297cf265da613356d4ec">promise<label class="task-list-item-label" for="task-item-4132936"> [promise](https://juejin.im/post/5c41297cf265da613356d4ec)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-204083"> <a href="https://www.bilibili.com/video/BV1MJ41197Eu?p=40">手写promise<label class="task-list-item-label" for="task-item-204083"> [手写promise](https://www.bilibili.com/video/BV1MJ41197Eu?p=40)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2049652"><label class="task-list-item-label" for="task-item-2049652"> 原型链</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-202326"><label class="task-list-item-label" for="task-item-202326"> 任何一个对象，都有原型对象，原型对象本身又是一个对象，所以原型对象也有自己的原型对象，这样一环扣一环就形成了一个链式结构，我们把这个链式结构称为：原型链。</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1594377"> <a href="https://www.cnblogs.com/sarahwang/p/6870072.html">继承<label class="task-list-item-label" for="task-item-1594377"> [继承](https://www.cnblogs.com/sarahwang/p/6870072.html)</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-378923"><label class="task-list-item-label" for="task-item-378923"> 原型链继承</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-252796"><label class="task-list-item-label" for="task-item-252796"> 借用构造函数</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1471555"><label class="task-list-item-label" for="task-item-1471555"> 组合继承</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4264077"><label class="task-list-item-label" for="task-item-4264077"> 深拷贝 （封装递归函数，JSON.parse（JSON.stringify））</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3619483"><label class="task-list-item-label" for="task-item-3619483"> 浅拷贝 （Object.assign，...展开）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5859987"><label class="task-list-item-label" for="task-item-5859987"> 闭包</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9732881"><label class="task-list-item-label" for="task-item-9732881"> 内函数访问外函数的局部变量，形成闭包（优：沙箱，插件；劣：内存泄漏）</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4836494"><label class="task-list-item-label" for="task-item-4836494"> call（性能比apply好）,apply,bind</label></p>
<pre><code class="language-js">Function.prototype.myCall = function (_this = window, ...rest) {
  _this._this = this;
  const result = _this._this(...rest);
  delete _this._this;
  return result;
}
</code></pre>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9397535"><label class="task-list-item-label" for="task-item-9397535"> 前端模块化</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6693478"><label class="task-list-item-label" for="task-item-6693478"> 自执行函数</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-581487"><label class="task-list-item-label" for="task-item-581487"> commonJS规范 node</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3589615"><label class="task-list-item-label" for="task-item-3589615"> esmodule ES6</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6819997"><label class="task-list-item-label" for="task-item-6819997"> AMD require.js 依赖前置</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3050412"><label class="task-list-item-label" for="task-item-3050412"> CMD sea.js 依赖就近</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6368718"><label class="task-list-item-label" for="task-item-6368718"> ==</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1446097"><label class="task-list-item-label" for="task-item-1446097"> NaN不等于任何值</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1863425"><label class="task-list-item-label" for="task-item-1863425"> null，undefined只等于null，undefined</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-506489"><label class="task-list-item-label" for="task-item-506489"> 两边有数字或者布尔，转数字比较</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4108101"><label class="task-list-item-label" for="task-item-4108101"> 两边有字符串，转字符串比较</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4933594"><label class="task-list-item-label" for="task-item-4933594"> 复杂类型比地址( []转"", {}转"[object Object]" )</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4609457"><label class="task-list-item-label" for="task-item-4609457"> this</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8210531"><label class="task-list-item-label" for="task-item-8210531"> 事件处理程序里this指向事件源(注册事件的那个dom)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3577316"><label class="task-list-item-label" for="task-item-3577316"> 构造函数（配合new）里的this指向刚刚创建的对象</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7972388"><label class="task-list-item-label" for="task-item-7972388"> setTimeout setInterval this指向window</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4013130"><label class="task-list-item-label" for="task-item-4013130"> 普通函数fn调用模式  fn() this===>>>window</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1871437"><label class="task-list-item-label" for="task-item-1871437"> 对象调用模式 obj.fn()  this===>>>obj(调用者)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7741715"><label class="task-list-item-label" for="task-item-7741715"> call,apply,bind this===>>>第一个参数(没传参就是window)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9022049"><label class="task-list-item-label" for="task-item-9022049"> 箭头函数没有this，所以如果箭头函数有this（this指向包裹它的局部作用域）</label></li>
<li>[ ]</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5831044"><label class="task-list-item-label" for="task-item-5831044"> es6</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2851653"><label class="task-list-item-label" for="task-item-2851653"> let (有块级作用域，不能重复定义，不会预解析，先声明再使用，不挂到window)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3291227"><label class="task-list-item-label" for="task-item-3291227"> const（有块级作用域，不能重复定义，不会预解析，先声明再使用,常量，定义就赋值，不挂到window）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4010689"><label class="task-list-item-label" for="task-item-4010689"> forEach,map,filter,some,every,find,findIndex，reduce</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4590326"><label class="task-list-item-label" for="task-item-4590326"> 解构赋值</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2101005"><label class="task-list-item-label" for="task-item-2101005"> 模版字符串</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3868079"><label class="task-list-item-label" for="task-item-3868079"> 字符串新增startsWith，endsWith，includes</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4236653"><label class="task-list-item-label" for="task-item-4236653"> 箭头函数</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4399525"><label class="task-list-item-label" for="task-item-4399525"> 函数默认值，剩余参数</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1840988"><label class="task-list-item-label" for="task-item-1840988"> 对象属性简写，方法简写</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-891585"><label class="task-list-item-label" for="task-item-891585"> ...展开运算符</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1545601"><label class="task-list-item-label" for="task-item-1545601"> set，map</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1112234"><label class="task-list-item-label" for="task-item-1112234"> 浏览器存储</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4514553"><label class="task-list-item-label" for="task-item-4514553"> cookie 小 每次请求自动携带 有销毁时间</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9890441"><label class="task-list-item-label" for="task-item-9890441"> localStorage 大 手动清理</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5609565"><label class="task-list-item-label" for="task-item-5609565"> sessionStorage 大 页面关闭就清理</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3015327"><label class="task-list-item-label" for="task-item-3015327"> indexDB 用不完 手动清理</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3083017"><label class="task-list-item-label" for="task-item-3083017"> async （Promise的语法糖）es7</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-756880"><label class="task-list-item-label" for="task-item-756880"> addEventLisntener(第三个参数如果true，表示该事件在捕获阶段执行，  如果false，表示事件在冒泡阶段执行。默认在冒泡阶段执行)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4484306"><label class="task-list-item-label" for="task-item-4484306"> new做了什么？</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9692751"><label class="task-list-item-label" for="task-item-9692751"> 创建对象 this指向该对象</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1788018"><label class="task-list-item-label" for="task-item-1788018"> 继承函数原型</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4507715"><label class="task-list-item-label" for="task-item-4507715"> 实例化</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6392470"><label class="task-list-item-label" for="task-item-6392470"> 隐式返回该对象</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1991292"><label class="task-list-item-label" for="task-item-1991292"> webpack</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3711158"><label class="task-list-item-label" for="task-item-3711158"> entry</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2781150"><label class="task-list-item-label" for="task-item-2781150"> output</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4918226"><label class="task-list-item-label" for="task-item-4918226"> module（loader）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2778196"><label class="task-list-item-label" for="task-item-2778196"> plugins</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8502223"><label class="task-list-item-label" for="task-item-8502223"> devServer</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8178578"><label class="task-list-item-label" for="task-item-8178578"> mode</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3300118"> <a href="https://segmentfault.com/a/1190000015597029">跨域<label class="task-list-item-label" for="task-item-3300118"> [跨域](https://segmentfault.com/a/1190000015597029)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1813908"><label class="task-list-item-label" for="task-item-1813908"> node（运行环境，允许js运行在服务端）</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2037476"><label class="task-list-item-label" for="task-item-2037476"> global顶级变量</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4098332"><label class="task-list-item-label" for="task-item-4098332"> fs模块 path模块</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9082882"><label class="task-list-item-label" for="task-item-9082882"> http模块</label></li>
</ul>
<pre><code class="language-js">  const http = require('http')
  const server = http.createServer()
  server.listen(8888, () =&gt; {
    console.log('恭喜你，服务器启动成功了')
  })
  server.on('request', (req, res) =&gt; {
    console.log('来了老弟')
    res.end('hello old brother')
  })
</code></pre>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1827089"><label class="task-list-item-label" for="task-item-1827089"> 浏览器垃圾回收机制</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6464587"><label class="task-list-item-label" for="task-item-6464587"> 引用计数（循环引用无法解决）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1020628"><label class="task-list-item-label" for="task-item-1020628"> 标记清除</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8924113"> 节流（指定时间间隔只触发一次）<a href="https://segmentfault.com/a/1190000018428170">link<label class="task-list-item-label" for="task-item-8924113"> 节流（指定时间间隔只触发一次）[link](https://segmentfault.com/a/1190000018428170)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7856885"><label class="task-list-item-label" for="task-item-7856885"> 防抖（动作触发后指定时间间隔内不再触发，执行某个函数）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5717429"> <a href="https://juejin.im/post/59aa71d56fb9a0248d24fae3">箭头函数 this</a> <strong>定义函数时所在上下文中的 this</strong><label class="task-list-item-label" for="task-item-5717429"> [箭头函数 this](https://juejin.im/post/59aa71d56fb9a0248d24fae3) **定义函数时所在上下文中的 this**</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1208651"><label class="task-list-item-label" for="task-item-1208651"> 异步</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6485200"><label class="task-list-item-label" for="task-item-6485200"> 回调（解决同步，回调地狱）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4762693"><label class="task-list-item-label" for="task-item-4762693"> promise（解决回调地狱，无法取消promise）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2858524"><label class="task-list-item-label" for="task-item-2858524"> generator（可以控制函数执行，dva）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2961664"><label class="task-list-item-label" for="task-item-2961664"> async await（代码清晰，性能低）</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8883852"> <a href="https://juejin.im/post/5a276865f265da432c23b8d2">http常见状态码<label class="task-list-item-label" for="task-item-8883852"> [http常见状态码](https://juejin.im/post/5a276865f265da432c23b8d2)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5683382"><label class="task-list-item-label" for="task-item-5683382"> git cherry-pick 8d03e78 用来复制某个分支上的某次提交</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2676630"><label class="task-list-item-label" for="task-item-2676630"> 两个已经提交的分支的相同文件相同位置的的不同操作进行了合并.就是冲突</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9004481"> <a href="https://blog.csdn.net/jdsjlzx/article/details/98654951">git tag 使用<label class="task-list-item-label" for="task-item-9004481"> [git tag 使用](https://blog.csdn.net/jdsjlzx/article/details/98654951)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1267136"><label class="task-list-item-label" for="task-item-1267136"> git stash -u  /  git stash pop</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6165577"> <a href="https://www.cnblogs.com/dyh-air/p/9257237.html">git push -u origin master<label class="task-list-item-label" for="task-item-6165577"> [git push -u origin master](https://www.cnblogs.com/dyh-air/p/9257237.html)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2255118"> <a href="https://blog.csdn.net/weixin_44761910/article/details/105029748">Git本地与远程分支间建立追踪关系<label class="task-list-item-label" for="task-item-2255118"> [Git本地与远程分支间建立追踪关系](https://blog.csdn.net/weixin_44761910/article/details/105029748)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3896302"> <a href="https://blog.csdn.net/L_serein/article/details/8550976?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">navigator.userAgent<label class="task-list-item-label" for="task-item-3896302"> [navigator.userAgent](https://blog.csdn.net/L_serein/article/details/8550976?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1728574"> <a href="https://blog.csdn.net/huang100qi/article/details/80237555">hash/histroy<label class="task-list-item-label" for="task-item-1728574"> [hash/histroy](https://blog.csdn.net/huang100qi/article/details/80237555)</label></p>
</li>
</ul>
<h2 id="hook">hook</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4959281"> <a href="https://juejin.cn/post/6844903813070094350">react副作用<label class="task-list-item-label" for="task-item-4959281"> [react副作用](https://juejin.cn/post/6844903813070094350)</label></li>
</ul>
<h2 id="typescript">typescript</h2>
]]></content>
    </entry>
</feed>